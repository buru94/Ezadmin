package com.example.pimz.jetnavigatorimport android.content.Contextimport android.content.Intentimport android.graphics.Colorimport android.graphics.PorterDuffimport android.os.*import android.provider.Settingsimport android.util.Logimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport android.widget.*import com.PointMobile.PMSyncService.SendCommandimport com.example.pimz.jetnavigator.R.layout.support_simple_spinner_dropdown_itemimport com.google.gson.*import com.squareup.picasso.Picassoimport kotlinx.android.synthetic.main.activity_product_list.*import kotlinx.android.synthetic.main.activity_product_list_grid_row.view.*import kr.co.ezapps.ezsmarty.Dataimport kr.co.ezapps.ezsmarty.Serviceimport retrofit2.Callimport retrofit2.Callbackimport retrofit2.Responseimport retrofit2.Retrofitimport retrofit2.converter.gson.GsonConverterFactoryimport java.io.UnsupportedEncodingExceptionimport java.net.URLEncoderclass ProductListActivity : BaseActivity() {    private var retrofit = Retrofit.Builder()        .baseUrl(URLFactory.serverUrl)        .addConverterFactory(GsonConverterFactory.create())        .build()    val mHandler: Handler = object : Handler() {        override fun handleMessage(msg: Message) {            when (msg.what) {                StockManageFragment.MESSAGE_BARCODE -> {                    val BarcodeBuff = msg.obj as ByteArray                    var Barcode = ""                    Barcode = String(BarcodeBuff, 0, msg.arg1)                    if (Barcode.length != 0) {                        PRODUCT_LIST_ACTIVITY_EDITTEXT.setText(Barcode)                    }                }            }        }    }    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        setContentView(R.layout.activity_product_list)        var value = intent.extras.get("title")        title = "상품관리 > " + value        SendCommand.SendCommandInit(MainActivity.mChatService, mHandler)        PRODUCT_LIST_ACTIVITY_SPINNER.onItemSelectedListener        val item: Array<String> = arrayOf("상품명", "상품코드", "바코드", " 공급처 상품명", "원산지", "제조사")        val Listadapter = ArrayAdapter(this, support_simple_spinner_dropdown_item, item)        PRODUCT_LIST_ACTIVITY_SPINNER.adapter = Listadapter        PRODUCT_LIST_SEARCH_BTN.setOnClickListener {            doGetListPost(1, GET_LIST)        }        PRODUCT_LIST_ACTIVITY_GRIDVIEW.setOnItemClickListener { adapterView, view, position, id ->            var mProductId = Products[position].getProduct_id().toString()            var mProductName = Products[position].getName().toString()            map["position"] = position.toString()            map["mProductName"] = mProductName            progressON(this, null)            doGetInfoPost(mProductId, GET_INFO)            Log.d("포지션",position.toString())            Log.d("품절품절", Products[position].getEnable_sale().toString())        }    }    class ImageAdapter : BaseAdapter {        private var inflater: LayoutInflater? = null        var context: Context? = null        private var imageList: ArrayList<Products>? = null        constructor(context: Context, imageList: ArrayList<Products>) : super() {            this.context = context            this.imageList = imageList        }        override fun getCount(): Int {            return imageList!!.size        }        override fun getItem(position: Int): Any {            return imageList!![position]        }        override fun getItemId(position: Int): Long {            return position.toLong()        }        override fun getView(position: Int, convertView: View?, parent: ViewGroup?): View? {            var convert = convertView            var holder = ViewHolder()            if (convert == null) {                inflater = context!!.getSystemService(Context.LAYOUT_INFLATER_SERVICE) as LayoutInflater                convert = inflater!!.inflate(R.layout.activity_product_list_grid_row, null)            }            val picassoImageView = convert!!.PRODUCT_LIST_ACTIVITY_GRID_IMAGEVIEW as ImageView            holder.mImage = picassoImageView            convert.tag = holder            var mUrl = getItem(position).toString()/*            Glide.with(context)                 .load(getItem(position))                 .error(R.drawable.ezadmin_title_logo)                 .fitCenter()                 .into(holder.mImageView)*/            Log.d("asdasdasdasdasd", mUrl)            Picasso                .get()                .load(mUrl)                .fit()                .centerCrop()                .error(R.drawable.ezadmin_title_logo)                .into(holder.mImage)            if(Products[position].getEnable_sale() != "1" ){                convert.PRODUCT_LIST_ACTIVITY_SOLDOUT_TEXTVIEW.visibility = View.VISIBLE                holder.mImage!!.setColorFilter(Color.parseColor("#6E6E6E"), PorterDuff.Mode.MULTIPLY)            }            convert.PRODUCT_LIST_ACTIVITY_GRID_PRID?.text = Products[position].getProduct_id().toString()            convert.PRODUCT_LIST_ACTIVITY_GRID_PRNAME?.text = Products[position].getName().toString()            Log.d("enable_sale 값 확인", position.toString()+"------------"+ Products[position].getEnable_sale().toString() +"------"+ Products[position].getName().toString())            return convert        }        inner class ViewHolder {            var mImage: ImageView? = null            var text: TextView? = null        }    }    private fun doGetListPost(page: Int, mode: Int): Boolean {        try {            val mProductId = PRODUCT_LIST_ACTIVITY_EDITTEXT.text.toString()            val mUUID = Settings.Secure.getString(applicationContext.contentResolver, Settings.Secure.ANDROID_ID)            val mUrlAuthcode = URLEncoder.encode(Session.getInstance().authCode, "UTF-8")            val mUrlType = URLEncoder.encode("NAME", "UTF-8")            val mUrlUserName = URLEncoder.encode(Session.getInstance().userName, "UTF-8")            val mUrlProductId = URLEncoder.encode(mProductId, "UTF-8")            val mLimit = 50            val mURL = "api/function.php"            val map = HashMap<String, String>()            var mPage = 1           if(mode == ADD)  { mPage = page }            else {mPage = 1}            val mToken ="SEARCHTYPE=$mUrlType|STRING=$mUrlProductId|WORKER=$mUrlUserName|PAGE=$mPage|LIMIT=$mLimit|UUID=$mUUID"            map["ACTION"] = URLFactory.GetProductList            map["AUTHCODE"] = mUrlAuthcode            map["VERSION"] = "v1"            map["TOKEN"] = mToken            if(mode == GET_LIST){                doGetProductList(map, mURL)            }            else if(mode == ADD){                doAdd(map, mURL)            }        } catch (e: UnsupportedEncodingException) {            e.printStackTrace()        }        return true    }    private fun doGetInfoPost(PrId: String, mode: Int) {        try {            val mProductId = PrId            val mUrlAuthcode = URLEncoder.encode(Session.getInstance().authCode, "UTF-8")            val mUrlProductId = URLEncoder.encode(mProductId, "UTF-8")            val mURL = "api/function.php"            val map = HashMap<String, String>()            map["ACTION"] = URLFactory.GetProductDetail            map["AUTHCODE"] = mUrlAuthcode            map["VERSION"] = "v1"            map["PRODUCT_ID"] = mUrlProductId            doGetProductInfo(map, mURL)        } catch (e: UnsupportedEncodingException) {            e.printStackTrace()        }    }    fun doGetProductInfo(input: HashMap<String, String>, Url: String) {        val retrofitService = retrofit.create(Service::class.java)        val call = retrofitService.postData(input, Url)        call.enqueue(object : Callback<Data> {            override fun onResponse(call: Call<Data>, response: Response<Data>) {                val mProductInfo = response.body()!!.productInfo.toString()                map["mProductInfo"] = mProductInfo                val intent = Intent(applicationContext, DetailProductActivity::class.java)                intent.putExtra("position", map["position"].toString())                intent.putExtra("mStatus", map["mStatus"].toString())                intent.putExtra("mProductName", map["mProductName"].toString())                intent.putExtra("mProductInfo", map["mProductInfo"].toString())                startActivity(intent)                progressOFF()            }            override fun onFailure(call: Call<Data>, t: Throwable) {                // 실패                Log.d("aaa", error(t))                Log.getStackTraceString(t)            }        })    }    fun doGetProductList(input: HashMap<String, String>, Url: String) {            progressON(this, null)        progressON(this, "Loading...")        val retrofitService = retrofit.create(Service::class.java)        val call = retrofitService.postData(input, Url)        call.enqueue(object : Callback<Data> {            override fun onResponse(call: Call<Data>, response: Response<Data>) {                // 성공                val mProduct: JsonArray = response.body()!!.products                for (i in 0 until mProduct.size()) {                    var mJson = (mProduct.get(i)).asJsonObject                    var mEnable_sale = mJson.get("enable_sale").toString().replace("\"", "")                    var mUrl = mJson.get("img_500").toString().replace("\"", "")                    var mPr_name = mJson.get("name").toString().replace("\"", "")                    var mPr_id = mJson.get("product_id").toString().replace("\"", "")                    Products[i].setEnable_sale(mEnable_sale)                    Products[i].setImageurl(mUrl)                    Products[i].setName(mPr_name)                    Products[i].setProduct_id(mPr_id)                }                     adapter = ImageAdapter(applicationContext, imageList = Products)                    PRODUCT_LIST_ACTIVITY_GRIDVIEW.adapter = adapter                Session.getInstance().page = 1                var i = Session.getInstance().page                progressOFF()                doAddPage(i, mAddFlag)                Log.d("배열값 확인", Session.getInstance().enable_sale.toString())            }            override fun onFailure(call: Call<Data>, t: Throwable) {                // 실패                Log.d("aaa", error(t))                Log.getStackTraceString(t)            }        })    }    private fun doAdd(input: HashMap<String, String>, Url: String) {        progressON(this, "Loading...")        mAddFlag = true        val retrofitService = retrofit.create(Service::class.java)        val call = retrofitService.postData(input, Url)        call.enqueue(object : Callback<Data> {            override fun onResponse(call: Call<Data>, response: Response<Data>) {                // 성공                val mProduct: JsonArray = response.body()!!.products                Log.d("asdasdasda111111",Session.getInstance().imageUrl.size.toString())                for (i in 0 until mProduct.size()) {                    var mJson = (mProduct.get(i)).asJsonObject                    var mUrl = mJson.get("img_500").toString().replace("\"", "")                    var mPr_name = mJson.get("name").toString().replace("\"", "")                    var mPr_id = mJson.get("product_id").toString().replace("\"", "")                    var mEnable_sale = mJson.get("enable_sale").toString().replace("\"", "")                    Products[i].setEnable_sale(mEnable_sale)                    Products[i].setImageurl(mUrl)                    Products[i].setName(mPr_name)                    Products[i].setProduct_id(mPr_id)                }                Log.d("asdasdasda222222", Products.size.toString())                progressOFF()                adapter!!.notifyDataSetChanged()                mAddFlag = false            }            override fun onFailure(call: Call<Data>, t: Throwable) {                // 실패                Log.d("aaa", error(t))                Log.getStackTraceString(t)            }        })    }    private fun doAddPage(i: Int,mFlag: Boolean): Int {        var i = i        PRODUCT_LIST_ACTIVITY_GRIDVIEW.setOnScrollListener(object : AbsListView.OnScrollListener {            override fun onScroll(view: AbsListView?, firstVisibleItem: Int, visibleItemCount: Int, totalItemCount: Int) {                if((totalItemCount - visibleItemCount) <= firstVisibleItem && !mAddFlag){                    mAddFlag = true                    doGetListPost( i,ADD)                    Session.getInstance().page = i++                }                    }            override fun onScrollStateChanged(view: AbsListView?, state: Int) {}        })        return i++    }    companion object {        private const val GET_LIST = 0        private const val ADD = 1        private const val GET_INFO = 2        var map = HashMap<String, String>()        var mAddFlag:Boolean = false        var adapter:ImageAdapter? = null        var Products: ArrayList<Products> = ArrayList()    }}